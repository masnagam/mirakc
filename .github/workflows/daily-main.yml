# DO NOT EDIT THIS FILE BY HAND.
#
# This file was generated by scripts/make-github-workflows automagically.
name: Daily (main)
on:
  schedule:
    - cron: '13 13 * * *' # UTC
env:
  MIRAKC_GA_REF_NAME: main
  MIRAKC_GA_REF_TYPE: branch
  # Use PAT in order to invoke other workflows.
  MIRAKC_GA_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
  MAIN_DISTRO: debian
jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      num-commits: ${{ steps.count.outputs.num-commits }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.MIRAKC_GA_REF_NAME }}
          token: ${{ env.MIRAKC_GA_TOKEN }}
      - name: git config
        run: |
          # https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Login to Docker Hub # for avoiding the download rate limit
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Update .devcontainer/Dockerfile
        run: |
          ./scripts/update-devcontainer-dockerfile
      - name: Update resources/mirakurun.openapi.json
        run: |
          timeout 120 ./scripts/update-mirakurun-openapi-json
      - name: Update mirakc-arib
        if: env.MIRAKC_GA_REF_NAME == 'main'
        run: |
          ./scripts/update-mirakc-arib
      - name: Push if changed
        run: |
          if git diff --quiet origin/$MIRAKC_GA_REF_NAME..HEAD
          then
            echo "No commit to push"
          else
            git push
          fi
      - name: Count commits made within 24 hours
        id: count
        run: |
          NUM_COMMITS=$(git rev-list --count --since '24 hours' $MIRAKC_GA_REF_NAME)
          echo "NUM_COMMITS=$NUM_COMMITS"
          echo "::set-output name=num-commits::$NUM_COMMITS"
  docker:
    if: needs.update.outputs.num-commits > 0
    needs:
      - update
    strategy:
      matrix:
        distro:
          - alpine
          - debian
        include:
          - distro: alpine
            platforms: >-
              linux/386, linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64/v8,
          - distro: debian
            # docker/setup-*-action has not supported linux/arm/v5.
            platforms: >-
              linux/386, linux/amd64, linux/arm/v7, linux/arm64/v8,
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.MIRAKC_GA_REF_NAME }}
          token: ${{ env.MIRAKC_GA_TOKEN }}
      - name: Docker tags
        id: docker-tags
        run: |
          IMAGE="{0}"  # placeholder
          VERSION="$MIRAKC_GA_REF_NAME"
          MAIN_TAG="$IMAGE:$VERSION-${{ matrix.distro }}"
          TAGS="$MAIN_TAG"
          if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]
          then
            TAGS="$TAGS,$IMAGE:$VERSION"
          fi
          if [ "$MIRAKC_GA_REF_TYPE" = tag ]
          then
            # Always update latest image tags when a new git tag is created.
            TAGS="$TAGS,$IMAGE:${{ matrix.distro }}"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:latest"
            fi
          fi
          echo "Version: $VERSION"
          echo "Main tag: $MAIN_TAG"
          echo "Tags: $TAGS"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=main-tag::$MAIN_TAG"
          echo "::set-output name=tags::$TAGS"
      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-cache-${{ matrix.distro }}-${{ hashFiles('**/Cargo.lock', 'docker/build-scripts/*') }}
          restore-keys: |
            ${{ runner.os }}-docker-cache-${{ matrix.distro }}-
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push (docker.io/mirakc/mirakc)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.distro }}
          target: mirakc
          platforms: ${{ matrix.platforms }}
          tags: ${{ format(steps.docker-tags.outputs.tags, 'mirakc/mirakc') }}
          cache-from: |
            type=local,src=/tmp/.docker-cache
          cache-to: |
            type=local,dest=/tmp/.docker-cache-new
          push: true
      - name: Build and push (docker.io/mirakc/timeshift-fs)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.distro }}
          target: mirakc-timeshift-fs
          platforms: ${{ matrix.platforms }}
          tags: ${{ format(steps.docker-tags.outputs.tags, 'mirakc/timeshift-fs') }}
          cache-from: |
            type=local,src=/tmp/.docker-cache-new
          cache-to: |
            type=local,dest=/tmp/.docker-cache-new
          push: true
      - name: Test (docker.io/mirakc/mirakc)
        run: |
          # Enable experimental CLI features in Docker daemon.
          echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

          TAG="${{ format(steps.docker-tags.outputs.main-tag, 'mirakc/mirakc') }}"
          for platform in $(echo ${{ matrix.platforms }} | tr ',' ' ')
          do
            echo "Testing $TAG for $platform..."
            docker run --rm --platform=$platform $TAG --version
            docker run --rm --platform=$platform --entrypoint=recdvb $TAG --version
            docker run --rm --platform=$platform --entrypoint=recpt1 $TAG --version
            docker run --rm --platform=$platform --entrypoint=mirakc-arib $TAG --version
            docker run --rm --platform=$platform --entrypoint=mirakc $TAG --version
          done
      - name: Test (docker.io/mirakc/timeshift-fs)
        run: |
          # Enable experimental CLI features in Docker daemon.
          echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

          TAG="${{ format(steps.docker-tags.outputs.main-tag, 'mirakc/timeshift-fs') }}"
          for platform in $(echo ${{ matrix.platforms }} | tr ',' ' ')
          do
            echo "Testing $TAG for $platform..."
            docker run --rm --platform=$platform --entrypoint=mirakc-timeshift-fs $TAG --version
          done
      - name: Move cache
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
